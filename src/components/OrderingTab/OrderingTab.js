import React, { useState, useContext, useEffect, useCallback } from 'react';
import { AppContext } from '../../context/AppContext';
import Button from '../common/Button';
import './OrderingTab.css';

const shuffleArray = (array) => [...array].sort(() => Math.random() - 0.5);

const OrderingTab = () => {
    const { sentenceData, setUserDefinedOrder } = useContext(AppContext);

    // State cho logic v√≤ng ch∆°i
    const [unansweredIndices, setUnansweredIndices] = useState([]);
    const [currentSentenceIndex, setCurrentSentenceIndex] = useState(null);
    const [options, setOptions] = useState([]);

    // State cho giao di·ªán
    const [isAnswered, setIsAnswered] = useState(false);
    const [selectedAnswer, setSelectedAnswer] = useState(null);
    const [correctlyPlacedCount, setCorrectlyPlacedCount] = useState(0);
    const [showCongrats, setShowCongrats] = useState(false);

    // Kh·ªüi t·∫°o v√≤ng ch∆°i
    useEffect(() => {
        if (sentenceData.length > 0) {
            const allIndices = Array.from(Array(sentenceData.length).keys());
            setUnansweredIndices(shuffleArray(allIndices));
            setCorrectlyPlacedCount(0);
            setShowCongrats(false);
        }
    }, [sentenceData]);

    // L·∫•y c√¢u h·ªèi ti·∫øp theo t·ª´ danh s√°ch ch∆∞a tr·∫£ l·ªùi
    useEffect(() => {
        if (unansweredIndices.length > 0) {
            setCurrentSentenceIndex(unansweredIndices[0]);
        } else if (sentenceData.length > 0) {
            // Ho√†n th√†nh xu·∫•t s·∫Øc!
            const finalOrder = Array.from(Array(sentenceData.length).keys());
            setUserDefinedOrder(finalOrder);
            setShowCongrats(true);
        }
    }, [unansweredIndices, sentenceData.length, setUserDefinedOrder]);

    // T·∫°o c√°c l·ª±a ch·ªçn ƒë√°p √°n khi c√≥ c√¢u h·ªèi m·ªõi
    const generateOptions = useCallback(() => {
        if (currentSentenceIndex === null || sentenceData.length === 0) return;

        const correctPosition = currentSentenceIndex + 1;
        let wrongPositions = [];
        while (wrongPositions.length < 3) {
            const randomPos = Math.floor(Math.random() * sentenceData.length) + 1;
            if (randomPos !== correctPosition && !wrongPositions.includes(randomPos)) {
                wrongPositions.push(randomPos);
            }
        }
        setOptions(shuffleArray([correctPosition, ...wrongPositions]));
    }, [currentSentenceIndex, sentenceData.length]);

    useEffect(() => {
        generateOptions();
    }, [generateOptions]);

    // T·ª± ƒë·ªông chuy·ªÉn sang c√¢u ti·∫øp theo sau khi tr·∫£ l·ªùi
    useEffect(() => {
        if (isAnswered && unansweredIndices.length > 0) {
            const timer = setTimeout(() => {
                handleNextQuestion();
            }, 1200);
            return () => clearTimeout(timer);
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [isAnswered]);

    const handleAnswerSelect = (position) => {
        if (isAnswered) return;
        setSelectedAnswer(position);
        setIsAnswered(true);
        if (position === currentSentenceIndex + 1) {
            setCorrectlyPlacedCount(prev => prev + 1);
        }
    };

    const handleNextQuestion = () => {
        setIsAnswered(false);
        setSelectedAnswer(null);
        setUnansweredIndices(prev => prev.slice(1));
    };

    if (sentenceData.length === 0) {
        return <div className="ordering-tab-container"><p>Kh√¥ng c√≥ d·ªØ li·ªáu. Vui l√≤ng x·ª≠ l√Ω vƒÉn b·∫£n ·ªü tab "Nh·∫≠p li·ªáu".</p></div>;
    }

    // Khi ƒë√£ ho√†n th√†nh t·∫•t c·∫£
    if (showCongrats) {
        return (
            <div className="ordering-tab-container completion-message">
                <div className="ordering-card">
                    <h2>üéâ Ch√∫c m·ª´ng!</h2>
                    <p>B·∫°n ƒë√£ s·∫Øp x·∫øp th√†nh c√¥ng to√†n b·ªô ƒëo·∫°n vƒÉn.</p>
                    <p>V√≤ng luy·ªán t·∫≠p ti·∫øp theo s·∫Ω ƒëi theo ƒë√∫ng th·ª© t·ª± c√¢u chuy·ªán n√†y.</p>
                    <Button onClick={() => {
                        const allIndices = Array.from(Array(sentenceData.length).keys());
                        setUnansweredIndices(shuffleArray(allIndices));
                        setCorrectlyPlacedCount(0);
                        setShowCongrats(false);
                    }}>Ch∆°i l·∫°i</Button>
                </div>
            </div>
        );
    }

    const currentSentence = sentenceData.find(s => s.originalIndex === currentSentenceIndex)?.originalText;
    const correctPosition = currentSentenceIndex + 1;

    return (
        <div className="ordering-tab-container">
            <div className="ordering-card">
                <div className="ordering-progress">
                    ƒê√£ x·∫øp ƒë√∫ng: <span className="ordering-success">{correctlyPlacedCount}</span> / <span>{sentenceData.length}</span>
                </div>
                <h3>‚ùì C√¢u n√†y ·ªü v·ªã tr√≠ th·ª© m·∫•y trong ƒëo·∫°n vƒÉn?</h3>
                <div className="ordering-sentence">"{currentSentence}"</div>
                <div className="ordering-options-grid">
                    {options.map(option => {
                        let btnClass = 'ordering-btn';
                        if (isAnswered) {
                            if (option === correctPosition) btnClass += ' correct';
                            else if (option === selectedAnswer) btnClass += ' incorrect';
                            else btnClass += ' disabled';
                        }
                        return (
                            <Button
                                key={option}
                                className={btnClass}
                                onClick={() => handleAnswerSelect(option)}
                                disabled={isAnswered}
                                style={{ minWidth: 64, margin: '8px', borderRadius: 12 }}
                            >
                                V·ªã tr√≠ {option}
                            </Button>
                        );
                    })}
                </div>
                {isAnswered && (
                    <div className={`ordering-feedback ${selectedAnswer === correctPosition ? 'success' : 'error'}`}>
                        <h4>{selectedAnswer === correctPosition ? '‚úÖ Ch√≠nh x√°c!' : '‚ùå Sai r·ªìi!'}</h4>
                        <p>C√¢u n√†y ƒë·ª©ng ·ªü v·ªã tr√≠ th·ª© <strong>{correctPosition}</strong>.</p>
                    </div>
                )}
            </div>
        </div>
    );
};

export default OrderingTab;